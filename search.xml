<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言中结构体struct的用法</title>
    <url>/2022/05/30/My_HexoBlog_with_Next(2)/</url>
    <content><![CDATA[<h2 id="定义结构体变量">定义结构体变量</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">   <span class="type">char</span> name[<span class="number">8</span>]; </span><br><span class="line">   <span class="type">int</span> age; </span><br><span class="line">   <span class="type">char</span> sex[<span class="number">2</span>]; </span><br><span class="line">   <span class="type">char</span> depart[<span class="number">20</span>]; </span><br><span class="line">   <span class="type">float</span> wage1, wage2, wage3, wage4, wage5; </span><br><span class="line">&#125;person;</span><br></pre></td></tr></table></figure>
<p>这个例子定义了一个结构名为string的结构体变量person。还可以省略变量名person，做如下定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string</span> </span></span><br><span class="line"><span class="class"> &#123;</span> </span><br><span class="line">    <span class="type">char</span> name[<span class="number">8</span>]; </span><br><span class="line">    <span class="type">int</span> age; </span><br><span class="line">    <span class="type">char</span> sex[<span class="number">2</span>]; </span><br><span class="line">    <span class="type">char</span> depart[<span class="number">20</span>]; </span><br><span class="line">    <span class="type">float</span> wage1, wage2, wage3, wage4, wage5; </span><br><span class="line"> &#125;;  </span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">string</span> <span class="title">person</span>;</span>   <span class="comment">//定义结构名为string的结构体变量person</span></span><br></pre></td></tr></table></figure>
<p>定义多个具有相同形式的结构变量：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string</span> <span class="title">Liming</span>, <span class="title">Liuqi</span>, ...;</span></span><br></pre></td></tr></table></figure>
<p>有一种结构体常常出现在函数内部，省略结构名，则称之为无名结构，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">   <span class="type">char</span> name[<span class="number">8</span>]; </span><br><span class="line">   <span class="type">int</span> age; </span><br><span class="line">   <span class="type">char</span> sex[<span class="number">2</span>]; </span><br><span class="line">   <span class="type">char</span> depart[<span class="number">20</span>]; </span><br><span class="line">   <span class="type">float</span> wage1, wage2, wage3, wage4, wage5; </span><br><span class="line">&#125; Liming, Liuqi;</span><br></pre></td></tr></table></figure>
<h2 id="结构体成员的获取与赋值">结构体成员的获取与赋值</h2>
<p>结构是一个新的数据类型，结构成员的表示方式为:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">结构变量.成员名</span><br></pre></td></tr></table></figure>
<p>如果将&quot;结构变量.成员名&quot;看成一个整体，这样就可以像其他变量那样使用。</p>
<p>下面这个例子定义了一个结构变量stu1，分别给name,age,group赋值，并打印输出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="type">char</span> *name;  <span class="comment">//姓名</span></span><br><span class="line">        <span class="type">int</span> age;  <span class="comment">//年龄</span></span><br><span class="line">        <span class="type">char</span> group;  <span class="comment">//所在小组</span></span><br><span class="line">    &#125; stu1;</span><br><span class="line">    <span class="comment">//给结构体成员赋值</span></span><br><span class="line">    stu1.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    stu1.age = <span class="number">18</span>;</span><br><span class="line">    stu1.group = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="comment">//读取结构体成员的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s的年龄是%d，在%c组\n&quot;</span>, stu1.name, stu1.age, stu1.group);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结构体数组">结构体数组</h2>
<p>结构体数组就是具有相同结构类型的变量集合，假如要定义一个班级40个同学 的姓名、性别、年龄和住址, 可以定义成一个结构数组。如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">8</span>]; </span><br><span class="line">    <span class="type">char</span> sex[<span class="number">2</span>]; </span><br><span class="line">    <span class="type">int</span> age; </span><br><span class="line">    <span class="type">char</span> addr[<span class="number">40</span>]; </span><br><span class="line">&#125;student[<span class="number">40</span>];</span><br></pre></td></tr></table></figure>
<p>结构体数组成员的访问是以数组元素为结构变量的, 其形式为:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">结构数组元素.成员名</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">student[<span class="number">0</span>].name</span><br><span class="line">student[<span class="number">30</span>].age</span><br></pre></td></tr></table></figure>
<h2 id="结构体指针">结构体指针</h2>
<p>结构体指针由一个加在结构变量名前的*操作符来定义，定义一个结构体指针如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">char</span> name[<span class="number">8</span>] </span><br><span class="line">   <span class="type">char</span> sex[<span class="number">2</span>]; </span><br><span class="line">   <span class="type">int</span> age; </span><br><span class="line">   <span class="type">char</span> addr[<span class="number">40</span>]; </span><br><span class="line">&#125;*student;</span><br></pre></td></tr></table></figure>
<p>使用结构体指针对结构体成员的访问与结构体变量对结构体成员的访问在表达方式不同。结构体指针对结构体成员的访问方式为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">结构体指针名-&gt;结构体成员 </span><br></pre></td></tr></table></figure>
<p>给上面定义的结构体中name和age赋值的语句：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(student-&gt;name, <span class="string">&quot;acket&quot;</span>); <span class="comment">//student-&gt;name就是(*student).name</span></span><br><span class="line">student-&gt;age=<span class="number">18</span>; </span><br></pre></td></tr></table></figure>
<p>需要指出的是结构体指针是指向结构体的一个指针，即结构体中第一个成员的首地址，因此在使用之前应该对结构体指针初始化，即分配整个结构体长度的字节空间：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">student=(<span class="keyword">struct</span> <span class="built_in">string</span>*)<span class="built_in">malloc</span>(size of (<span class="keyword">struct</span> <span class="built_in">string</span>));</span><br><span class="line"><span class="comment">//size of (struct string)是自动求取string结构体的字节长度</span></span><br></pre></td></tr></table></figure>
<p>malloc()函数定义了一个大小为结构体长度的内存区域，然后将其地址作为结构体指针返回，相关文章:<a href="http://mp.weixin.qq.com/s?__biz=MzI1MDg4OTMwMw==&amp;mid=2247484098&amp;idx=2&amp;sn=53a5d30075027b190205da6a83fef682&amp;chksm=e9fa17fade8d9eec6461cd135f1d559912daa6819084b9a88ffca258868f80be99bf5d3d1f2f&amp;scene=21#wechat_redirect">C语言中的内存管理</a>。</p>
<h2 id="位结构">位结构</h2>
<p>位结构是一种特殊的结构体，位结构定义的一般形式为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>  位结构名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    数据类型 变量名: 整型常数; </span><br><span class="line">     数据类型 变量名: 整型常数; </span><br><span class="line">&#125;位结构变量;</span><br></pre></td></tr></table></figure>
<p>其中数据类型必须是int（unsigned或signed，但当成员长度为1时, 会被认为是unsigned类型），整型常数必须是0~15的非负整数，表示二进制位个数。变量名是选择项，可以不命名，下面定义了一个位结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> incon: <span class="number">8</span>;    <span class="comment">/*incon占用低字节 的0~7共8位*/</span> </span><br><span class="line">    <span class="type">unsigned</span> txcolor: <span class="number">4</span>;<span class="comment">/*txcolor占用高字节的0~3位共4位*/</span> </span><br><span class="line">    <span class="type">unsigned</span> bgcolor: <span class="number">3</span>;<span class="comment">/*bgcolor占用高字节的4~6位共3位*/</span> </span><br><span class="line">    <span class="type">unsigned</span> blink: <span class="number">1</span>;  <span class="comment">/*blink占用高字节的第7位*/</span></span><br><span class="line"> &#125;ch;</span><br></pre></td></tr></table></figure>
<p>位结构成员的访问与结构体成员的访问相同，访问位结构中的bgcolor成员可写成：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ch.bgcolor</span><br></pre></td></tr></table></figure>
<p>举个例子</p>
<p><img data-src="/images%5C%E7%BB%93%E6%9E%84%E4%BD%93.png" alt="例图"></p>
<h2 id="typedef定义结构体">typedef定义结构体</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age ;</span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">char</span> *sex;</span><br><span class="line">&#125;student;</span><br><span class="line"></span><br><span class="line">student stu1; <span class="comment">//此处可以用student来定义一个结构体变量</span></span><br></pre></td></tr></table></figure>
<p>typedef的作用就相当于给struct person取了一个别名student。</p>
]]></content>
      <categories>
        <category>C语言基础知识</category>
      </categories>
      <tags>
        <tag>结构体</tag>
      </tags>
  </entry>
  <entry>
    <title>你好，我的博客世界!!!</title>
    <url>/2022/05/29/My_HexoBlog_with_Next(2)/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="20dcac384a012764b6e5d316bdccf4f4bdcaa5665703b27bcc03a35a2bf3f723">268e3d99bacc59ca426f7be859149b4fcffc5e9f9cdc1809fecfe8bf8434d3779dc91820e4359c8ef086d6543e54e5449b71ac92f1ebc9c569898c888ddfc599ba71f73443ebc7c908980b3366a539865d21b7949f2618b923b480c6cd34dfe826c52116bc39164e24d3792823dea72118d426b260b2fc6e52e67f593504348c1d769ee9ccc100e3c053f27d82665363e9f3d9f6064c2696a560e505ff855a88dad43bd5009f3306c39e04de9fb729124da592e96098571521dd4fb07c17506a106b423d5bb356b5038177ad194d3890d9d608b4dd9e2a4ed2502ee6cac4d34ec5cf8a7dc118812a218ae0ef2fe7f1f625771809b84d6c4b93dc442692f7a70f0a7334bc4c3aaec2fe5852725bae8c6123a4fc8005a5e19ef964787afabbf8888db198cf09e2b7a011e12affc4ec3bdd2f656a9f91409ea0aa8e089b14b56603d55242f7566dc69f4a3d3d7be7714611a2c21d05bdc57c6e3b9cb8370fecd79426fd1a2dc9c0ee379b19fc8080a89aa20e96b6f12cc943ed81e5f42b0e5d8c7ac0fc6582ffd773f730cf26a732151c866f8bd945cd9f2de335382cb703d1e2876f98fa9161ec7b08fc8d1ad8ae75b0b211c126b1203a5e3040ae1963aab45cf229b2aa9e1571c1bb6357dc8b17a80321d965680549525d10d9f023e4be6bfe5498c597323325cc6a6e7434a2d4a1c54fcbff682d4153f340331edd3161ce735475789ab21e107da041b6d4ccb4eced9a87d7b862a96b0a8a7c27ec83a29d68dec5daa96879155a8e4879ab474e89fd4f8a792948371fa341aff845de21d64cd8718c7f0c996d23bd35a223603a19edc214c31925055aa87e756eb5b9de81a3627ae3cf6b1d6de864b1e6392b12030a5831657c76d1c981d75eb504ee593bbfea4bc9012599f45941d3f56fdbd1d64fed4916526e539dbe97ded780e48573888d4ef8562eca72f14cd2885f9ee9465cbc6c648ce3d08c4141362413fc6ce74776174ddd6e9e7c770b4dab7f742edbcadd805c3abef439e612927f230affe7a0cc59640b408a82634453c1d8ef4eb69693b5db5ffdb2f68a4b94bc3196207dc835d07da4b35a2ce4727aab461c6e46cde844466b757edecec0ec9ce5f7218aec770feb2da2a688c40277633253fa8139dd637d9bcdb1d472000a9ec29aedb3768a7bce89ddcf47f6f4d542aef4bd848bec34c9e3a147d7228353852e371d2be2f8786fb46e5b92dbb231dc2c490545d4d5eeff98c5bae22bdaa9ce177dce2843fc943c3661a8551d2d4eb44942207ed20c16a224365caa54599a946089cb6d6d9cce59e4f577e8136c1a7179da89533a86e4ce54b65f1c64b099cd974b124823a2bca3115f734c3692f5ab96c804b1072353774de26ca6359922c6f7f0dbba054ff2ae6d2165fc796b7367b0e986f6456ddb440074418222610289b3c81d3c2692357cb465318b2e1bdfbda1860f122bc7fb13ed92cff1b1b843b74c497c5d760c6733efdad92d6e60e762a71f10fa3135a2d44c5fb4be79fde7a78984af813e43153549d1ababcf0492b11cee2a835fc776ad8c28f1029fe29fc099d1bda55ba938d08577a9f1e816e0053fa5185896ab35b0cbbf084df61d96a0eef77dbe776b4cdf88a63b9ccc79db6c7e6699026871f440565e915012d3662c64d52196b9cee5935de917f5a88aafb6b47896662788cfddb460fd6ab104291efe0e86e7017631eb8d916a42069dddd4459249eb4a1a39664d99fad2800c820210f3a996cff73b27c884b1d50e0fe7d79229cb5f01d32f9c8550919eaf50ddac06dc357c8ea65d82ab98ff31acc760164f7009e5fee1f9b7bc25eda5325f7fa9a1c772323cfd28baed6ccd259139543d8dc7a1ac9f005cc7302507eec96002ee02654e72511c08cec86a2bb65c2f4410fee21c4cd5f4767e4470766b8182bf0e23b9a803587f4b792f9ec4d28a7e8ffbb9f4a694a9379ad4b8a15b7fb618d1826c42f3abda4d75adea9fbe6c3cd17ade792946b7d60a5952c0757c21c7834bffb380519a98c2c2788cc7770afe12c56c85fb7fd7eb94a053f23de1d92f292dd34b2209873a29aeb1a8aa46e43cebde62eb5d3577437d1c1f8d3e1341276cfc9b45feadba2870b3428a0ee2e3a30ac0cd3851532a733d7bc583c17eb09ced8f10319fbac69df709a8ba87b55f9745d77581b98519ef58126db823163a556e1adec0febd6cb2ee4d51a6e24601deff3cc22899635ebeec53486bc03dca98fb4d548c04f8f0c8b9b45561ba67413664d792dc1c532b27fa3235dde7072e1ddedc876fbd55c10689588ad21281548b8c9d723702daf1d2aadd20c7e9bb33c4ba4931a6c1327736c130f1672034d32d5584792a58edf4a4e2b64fa678bb14ee5acb8d90b9f1bf405c7a2f45e28c90cf2145dc2e2bca382db91d669100019b7bdee181dfefdb3399ef113f3490e686ad1ba0b5456b325431088d485b31e290f071a674b8186e0761673103192f04c9e7e3f995446f39f8708ada38a3bee8fae829b7e8c59e371e9d27fedbbfcc844699f30f82c4af97b6ec5f6e81019ce3f35f81fc707194e7cd6abe96011b143c35eeceae80135dbf30b392b9b0486a1b27f38184b43d9daed5a0f045c456de7f83ec59ca3ebbb3792bd408a262be90b9ffee2f164f5e7f9c7b31739f7c9b6c349d2e34da212367a5b3e72741cc15e25ab8182218b9ce63b74a2c8f4b37951584f3e4e8965db7953df759b818369d46a6927e57019bfa8d0425804eb31f284fc3e1a77337fbfe1ee3d98979e178aca39422d0b9c69eeed9d8d32e9134bf572a87368f0c77a792ec46dba7a6f4af597f04a0b0963a2e000cf6da9e1af2ad1ec0bf5d26697c4cee446ce583fcb8ba652518259e2026fc59095435c8499884ff2294b0818930003304a08875cb89cb89ac59d77026ee8145a5ba8f1f0ea3369f60010ab86893ebf6c69dc0bffc841c7daa1aa9c9b270080c06c8dbf0320ea58c9e95e76ae788eeee520a8208ed7f6e984f266a42f4cd9ddb7bc3cc7c8c8e7eb8caedb8412f7eda8bb4385d6e4a8429a246eea5682b158ea5218f555314b9618554f2f833cb21438f1d50404a6298f11e5b46501208583d7dc054843602ea0cc245f57d33ac9a22fe4db8d9686b861af4bd7caae3752cde367037230e2a8dbed332b413d6d8e9dbabac824e09294bf8eb71b8d0363651d52d1409fde7b3666c4ca6a27667c3c3baba2d81744a40</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">想知道密码吗，过来问我，我告诉你哦！！！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>我的博客诞生</category>
      </categories>
      <tags>
        <tag>世界</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言指针用法</title>
    <url>/2022/06/04/My_HexoBlog_with_Next(2)/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ff9d0e3615d291c3df745ec0db03ff483826bd02135e3db9083b2e9e34903c89">268e3d99bacc59ca426f7be859149b4f4d86433f22d9a7901dd3d1beaaf6fdac9e821a7333df5b9ebc3adb5d9c19477a223974a8ff00f488276c952cd3c1e4a3dd6f5bc0e215fecc5eaff756041d9861f3d035540380a3d0d0fd9b4f409b4d94b5276c74fe51ae4c71db2baa34aa143b77e59610db051e6bd9caa1a5392098da2cc63b9009a4bf2df8f142dc995f0201977494572974446fb4e6af912fbebf1d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">想知道密码吗，过来问我，我告诉你哦！！！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活中软件技巧积累</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
