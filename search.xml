<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言中结构体struct的用法</title>
    <url>/2022/05/30/My_HexoBlog_with_Next(2)/</url>
    <content><![CDATA[<h2 id="定义结构体变量">定义结构体变量</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">   <span class="type">char</span> name[<span class="number">8</span>]; </span><br><span class="line">   <span class="type">int</span> age; </span><br><span class="line">   <span class="type">char</span> sex[<span class="number">2</span>]; </span><br><span class="line">   <span class="type">char</span> depart[<span class="number">20</span>]; </span><br><span class="line">   <span class="type">float</span> wage1, wage2, wage3, wage4, wage5; </span><br><span class="line">&#125;person;</span><br></pre></td></tr></table></figure>
<p>这个例子定义了一个结构名为string的结构体变量person。还可以省略变量名person，做如下定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string</span> </span></span><br><span class="line"><span class="class"> &#123;</span> </span><br><span class="line">    <span class="type">char</span> name[<span class="number">8</span>]; </span><br><span class="line">    <span class="type">int</span> age; </span><br><span class="line">    <span class="type">char</span> sex[<span class="number">2</span>]; </span><br><span class="line">    <span class="type">char</span> depart[<span class="number">20</span>]; </span><br><span class="line">    <span class="type">float</span> wage1, wage2, wage3, wage4, wage5; </span><br><span class="line"> &#125;;  </span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">string</span> <span class="title">person</span>;</span>   <span class="comment">//定义结构名为string的结构体变量person</span></span><br></pre></td></tr></table></figure>
<p>定义多个具有相同形式的结构变量：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string</span> <span class="title">Liming</span>, <span class="title">Liuqi</span>, ...;</span></span><br></pre></td></tr></table></figure>
<p>有一种结构体常常出现在函数内部，省略结构名，则称之为无名结构，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">   <span class="type">char</span> name[<span class="number">8</span>]; </span><br><span class="line">   <span class="type">int</span> age; </span><br><span class="line">   <span class="type">char</span> sex[<span class="number">2</span>]; </span><br><span class="line">   <span class="type">char</span> depart[<span class="number">20</span>]; </span><br><span class="line">   <span class="type">float</span> wage1, wage2, wage3, wage4, wage5; </span><br><span class="line">&#125; Liming, Liuqi;</span><br></pre></td></tr></table></figure>
<h2 id="结构体成员的获取与赋值">结构体成员的获取与赋值</h2>
<p>结构是一个新的数据类型，结构成员的表示方式为:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">结构变量.成员名</span><br></pre></td></tr></table></figure>
<p>如果将&quot;结构变量.成员名&quot;看成一个整体，这样就可以像其他变量那样使用。</p>
<p>下面这个例子定义了一个结构变量stu1，分别给name,age,group赋值，并打印输出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="type">char</span> *name;  <span class="comment">//姓名</span></span><br><span class="line">        <span class="type">int</span> age;  <span class="comment">//年龄</span></span><br><span class="line">        <span class="type">char</span> group;  <span class="comment">//所在小组</span></span><br><span class="line">    &#125; stu1;</span><br><span class="line">    <span class="comment">//给结构体成员赋值</span></span><br><span class="line">    stu1.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    stu1.age = <span class="number">18</span>;</span><br><span class="line">    stu1.group = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="comment">//读取结构体成员的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s的年龄是%d，在%c组\n&quot;</span>, stu1.name, stu1.age, stu1.group);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结构体数组">结构体数组</h2>
<p>结构体数组就是具有相同结构类型的变量集合，假如要定义一个班级40个同学 的姓名、性别、年龄和住址, 可以定义成一个结构数组。如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">8</span>]; </span><br><span class="line">    <span class="type">char</span> sex[<span class="number">2</span>]; </span><br><span class="line">    <span class="type">int</span> age; </span><br><span class="line">    <span class="type">char</span> addr[<span class="number">40</span>]; </span><br><span class="line">&#125;student[<span class="number">40</span>];</span><br></pre></td></tr></table></figure>
<p>结构体数组成员的访问是以数组元素为结构变量的, 其形式为:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">结构数组元素.成员名</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">student[<span class="number">0</span>].name</span><br><span class="line">student[<span class="number">30</span>].age</span><br></pre></td></tr></table></figure>
<h2 id="结构体指针">结构体指针</h2>
<p>结构体指针由一个加在结构变量名前的*操作符来定义，定义一个结构体指针如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">char</span> name[<span class="number">8</span>] </span><br><span class="line">   <span class="type">char</span> sex[<span class="number">2</span>]; </span><br><span class="line">   <span class="type">int</span> age; </span><br><span class="line">   <span class="type">char</span> addr[<span class="number">40</span>]; </span><br><span class="line">&#125;*student;</span><br></pre></td></tr></table></figure>
<p>使用结构体指针对结构体成员的访问与结构体变量对结构体成员的访问在表达方式不同。结构体指针对结构体成员的访问方式为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">结构体指针名-&gt;结构体成员 </span><br></pre></td></tr></table></figure>
<p>给上面定义的结构体中name和age赋值的语句：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(student-&gt;name, <span class="string">&quot;acket&quot;</span>); <span class="comment">//student-&gt;name就是(*student).name</span></span><br><span class="line">student-&gt;age=<span class="number">18</span>; </span><br></pre></td></tr></table></figure>
<p>需要指出的是结构体指针是指向结构体的一个指针，即结构体中第一个成员的首地址，因此在使用之前应该对结构体指针初始化，即分配整个结构体长度的字节空间：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">student=(<span class="keyword">struct</span> <span class="built_in">string</span>*)<span class="built_in">malloc</span>(size of (<span class="keyword">struct</span> <span class="built_in">string</span>));</span><br><span class="line"><span class="comment">//size of (struct string)是自动求取string结构体的字节长度</span></span><br></pre></td></tr></table></figure>
<p>malloc()函数定义了一个大小为结构体长度的内存区域，然后将其地址作为结构体指针返回，相关文章:<a href="http://mp.weixin.qq.com/s?__biz=MzI1MDg4OTMwMw==&amp;mid=2247484098&amp;idx=2&amp;sn=53a5d30075027b190205da6a83fef682&amp;chksm=e9fa17fade8d9eec6461cd135f1d559912daa6819084b9a88ffca258868f80be99bf5d3d1f2f&amp;scene=21#wechat_redirect">C语言中的内存管理</a>。</p>
<h2 id="位结构">位结构</h2>
<p>位结构是一种特殊的结构体，位结构定义的一般形式为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>  位结构名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    数据类型 变量名: 整型常数; </span><br><span class="line">     数据类型 变量名: 整型常数; </span><br><span class="line">&#125;位结构变量;</span><br></pre></td></tr></table></figure>
<p>其中数据类型必须是int（unsigned或signed，但当成员长度为1时, 会被认为是unsigned类型），整型常数必须是0~15的非负整数，表示二进制位个数。变量名是选择项，可以不命名，下面定义了一个位结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> incon: <span class="number">8</span>;    <span class="comment">/*incon占用低字节 的0~7共8位*/</span> </span><br><span class="line">    <span class="type">unsigned</span> txcolor: <span class="number">4</span>;<span class="comment">/*txcolor占用高字节的0~3位共4位*/</span> </span><br><span class="line">    <span class="type">unsigned</span> bgcolor: <span class="number">3</span>;<span class="comment">/*bgcolor占用高字节的4~6位共3位*/</span> </span><br><span class="line">    <span class="type">unsigned</span> blink: <span class="number">1</span>;  <span class="comment">/*blink占用高字节的第7位*/</span></span><br><span class="line"> &#125;ch;</span><br></pre></td></tr></table></figure>
<p>位结构成员的访问与结构体成员的访问相同，访问位结构中的bgcolor成员可写成：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ch.bgcolor</span><br></pre></td></tr></table></figure>
<p>举个例子</p>
<p><img data-src="/images%5C%E7%BB%93%E6%9E%84%E4%BD%93.png" alt="例图"></p>
<h2 id="typedef定义结构体">typedef定义结构体</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age ;</span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">char</span> *sex;</span><br><span class="line">&#125;student;</span><br><span class="line"></span><br><span class="line">student stu1; <span class="comment">//此处可以用student来定义一个结构体变量</span></span><br></pre></td></tr></table></figure>
<p>typedef的作用就相当于给struct person取了一个别名student。</p>
]]></content>
      <categories>
        <category>C语言基础知识</category>
      </categories>
      <tags>
        <tag>结构体</tag>
      </tags>
  </entry>
  <entry>
    <title>你好，我的博客世界!!!</title>
    <url>/2022/05/29/My_HexoBlog_with_Next(2)/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2a255cfcd263dddbf6588252dd89d2b47c94a1b30108386d2e74d2655b41a1da">4630436162ade97ba2718b7d0c4b3b63f97fe7f487088031e1ec7f30c37889e17af4f6297068ec459b8609dd5e773f884c55009995b4e2fa14cd0ad5eff0ada9f9fb8fb348a39322f64a27b4e67198e9d0918355853825b4a8b859e1b0997d0838db13d93eb663a75abf26151a4cd6693bc3399e41eef6d4a0d8ac518bee9c9ddee4d733ecfde4f1c7c01610b2139c3f919d321e3580e4ea4d25333a1eb6a757138158c91746eb650d2bd292b639e6c34cbf144f87d98390fac9f8662146f06c3a6438c2b9ee94e1d311e783b3870047c72629be8369de61aafcfd95d1a6b146908a00176e823191858046b0d3068b0efa543f002c4411ac17d84cfbc5419db7d33e0dec60d5febc26877845ea4a0c78edbec57ec484cb94f4a5981b779247299a083552613550cf2067f03e18806e1d8b7363322598e505c747f93d1e38576db45e8de5d1770b452a4fb1219a730e7968e9f6fbb48dd64088b4f6b768d41ae0fde1188c840a5b26f4bcf87fc459371861bccf009fd56466bfb6189998e9e6a70ba3621ca8bdf949e5cadcc118f51f12983682d54b3fadc89599f99b3bc97b0a9f25fe1ec62d3b95f94306c3371b44d0ea8ec4c117df1586d803a9b60238cf2c1182dd312a70054991d21be8dc5c5e894d00edc791e391a244f6b412b09b869160a34da1604fea296e72c2095980d6442a5f31b887335d4b35de48f7bb6800f18dc8d4189815be9f96d51d0f5df65ae95f6540c57b5082ed574b0b4c6ed5645814be2a528c795334b2cd729f91392ecddfc2971a3807da892ab9cdaa995b3e35a783cdb43a39a305126088a46ef863224d41765fc98a52b01f4ba283001ce985bd4ed8f3f8548746bd06b11b07b36e5acb9aeae25ee5d5d8840440785ea0e6070d933796518c983e5fa204fd02f80ce8636a5bc4625ba6f54e8758982c5061318bcc173c297c5e3d59b486b76e94f832b6a9bd1e4e069f9400541a3ba60377af3be69e16971451f4a46b082841fd643c100688bbe1bdc056c0c17337046ae9f1e5e89f1698c359c807b5a27100750b4a6f7705e5f4dadf9f23867930507304a66d3e805c2ed7edc80f6f60ebb2f223d0a9ef19e6e2869c2e758336e25fb9cb066a74051bb89517214c4442dc245097ecfde8b210dada25198cf3c94d80477a77265391be98c95daa28d5017743f0560194159b5c2cb26eccf5849c59f652153311433c6fe3833bc8efba10f1bbafd8974b9d852a1d40b053ae6099bc3f6303ba017f0f199dd0aecdaeb406429c638f39b1b9a8a81921159e6f5b50caace212c5ddd898b88baccf404862c14078ff2f2b7625e86cf58b7b56003faeec89202449a43e15f42bc87037ef78e1bb677ef01c70959b20acf612ff07a01e2bb5a9861715047c344517be25b901a7cd3be91c6e71d603b850af5867a67256e458efe7435f6e2068e3e3d0a8fca3f5020daf82287b42e44020cfc5730800f68a2fd379372afc9570f105b60d5c7cb33ce3f1d9c85172a348f7e4559562374f5fce71a96d57894ffcdb6a37c475ec268c5450f2c4cc67a5c801449b0914d03ca178750550650bb4c4cfb136347ca49c987efb1cf159b8ce8063d43f4351f51bc57d1d01066ae4f82a16d23945bd2fd5d2b6fd6e5c930c1c528851b86a917428804c6958b0d544acfaefcad4b1b4dcd4023870cf59b489a72aaa3f58077ce9571decee60d143e606da708f1a7afb0e32320f6f3a510718937629f7cc6b7f0fdd75cf6edc1d37cbeba5abb58942e59943afdc9eb3c779ec7474188c9e634feab787b946fb688baedc03e8f3c920da94235f0587e73cc38c6ff231adf42c5f124452d4f7e8a552c9e141f7e19a92c48a0a4f8b9f0e3c4562296c9c7688796cff1e7a45e2b42b2c7953eaefa55f42316809f1a7960c97d62c13dbbdc52976db38810f7ebe7585c884f945409e5cd4e825d736a57de3cd17350a35352cd19adebe5804e88262f237ab9575a39897000c02eee84175ccd7467a2b5c93b47893565c67162cfc5d033cba4f1a4c6abd6c6c0be7114947114062316e88531066d20b8cbb93f45e8e40191965855c662e562beb891c814d1390b27eff3159c26192864ab27f8f68906df269228774c31ad8af4132b9f033ad6d3101844644c962d735d9dc47417a413ff4601d766f77852ad60a58301f347407e6a101f7e97563ff334364c8b68a9d54c8437662bdcbc1e95b34b6f97ae67adea0c1db9237c64d982a28379b228ab3ad873bfd0562f22f4e52c995c218776e864c15ad65055bcef6f1ccc7583ec5bb16042a4a4743f3c121c5c5809967e610c8fdaa2799ef8f7c4f78bdb95a902c92785c3c96fe08c6c47934f644c14ef03dcceecc16eb30fcad03b9a25332d313995160a66a48983e1c4b21e8688f23d9fa2daaa88f5858ba894a4ee316119d77522edc8afde86c9c7cd036c2a249b3a2ba734fb02ff603a0e66f9ff7f1fab2550de5f3df82f0c14d105a8db9c6bb4d21b907dcb6be31f3f1fdd6ed5a95d0db2771b3e9bb8ff92a05617f855c09e4c306284ba6fe948765eecf24d1ac6788333ce19b37f09e782bfb1b4866c561fc6add981789bb64deea3a232f07bae19f7c9cb7db8bad8a88f774af94a476287214657c01bacba4153e9aecdc6b069eb8f5d53baccdd6b43da28ab5800ac18675c847c460b550781e81b06c7f05e059ecda8139b584519b66beb8ed10587c6861b72804d3a5b739ea153c30808b0bf267561781d318d794c54c95a77b787c56e07fd4df3a3bff7901705370af55898db76bb28c5d8da8a306347173a666af9a1522e4873abd23daba54f9eb6e6b01a557a2e67c5845843024708897249c2104d7e1fd11ddfd6ea277df81447ca3210a875a8738bfd8ede8a24cf7d0ef4a9bf2bebfe846f5933cd91d86651b2130f539e43a9687d49acec096c16b8a250e9f9b931b025f8a3902eba1e9b29faaf9f16a64cab5bbf7a0d1defcfdbae1df542d5682e74cc39062e88a10a2c62da3d1e25f361d4f72df</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">想知道密码吗，过来问我，我告诉你哦！！！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>我的博客诞生</category>
      </categories>
      <tags>
        <tag>世界</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言指针用法</title>
    <url>/2022/06/01/My_HexoBlog_with_Next(2)/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C语言基础知识</category>
      </categories>
      <tags>
        <tag>指针</tag>
      </tags>
  </entry>
</search>
